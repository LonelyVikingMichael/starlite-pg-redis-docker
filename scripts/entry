#!/bin/bash

# Script run before gunicorn/arq is allowed to start
# We make sure redis and postgres are ready, and we run migrations.

set -o errexit
set -o pipefail
set -o nounset

redis_ready() {
    python << END
import asyncio
import sys

from aioredis import Redis
from app.config import cache_settings


async def c():
    try:
        redis = Redis.from_url(cache_settings.URL)
        await redis.ping()
    except ConnectionError:
        sys.exit(-1)


if __name__ == '__main__':
    asyncio.run(c())
END
}

postgres_ready() {
  python <<END
import asyncio
import sys
from asyncpg import connect
from app.config import db_settings


async def c():
    try:
        await connect(dsn=db_settings.sync_database_uri)
    except ConnectionRefusedError:
        sys.exit(-1)

if __name__ == '__main__':
    asyncio.run(c())
END
}

# Check Gunicorn config
gunicorn --check-config --config=gunicorn.conf.py app.main:app
echo "Gunicorn config OK"

# Wait for Redis to be ready
until redis_ready; do
  >&2 echo "Waiting for Redis to become available..."
  sleep 5
done
>&2 echo "Redis is available"

# Wait for PostgreSQL to be ready
until postgres_ready; do
  echo >&2 "Waiting for PostgreSQL to become available..."
  sleep 5
done
echo >&2 "PostgreSQL is available"

# Run migrations
alembic upgrade head

gunicorn app.main:app
